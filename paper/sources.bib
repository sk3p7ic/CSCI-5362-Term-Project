@article{emre2021translating,
  title={Translating C to safer Rust},
  author={Emre, Mehmet and Schroeder, Ryan and Dewey, Kyle and Hardekopf, Ben},
  journal={Proceedings of the ACM on Programming Languages},
  volume={5},
  number={OOPSLA},
  pages={1--29},
  year={2021},
  publisher={ACM New York, NY, USA}
}

@book{klabnik2018rust_book,
author = {Klabnik, Steve and Nichols, Carol},
title = {The Rust Programming Language},
year = {2018},
isbn = {1593278284},
publisher = {No Starch Press},
address = {USA},
abstract = {The Rust Programming Language is the official book on Rust, an open-source, community-developed systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. This is the undisputed go-to guide to Rust, written by two members of the Rust core team, with feedback and contributions from 42 members of the community. The book assumes that youve written code in another programming language but makes no assumptions about which one, meaning the material is accessible and useful to developers from a wide variety of programming backgrounds. Known by the Rust community as The Book, The Rust Programming Language includes concept chapters, where youll learn about a particular aspect of Rust, and project chapters, where youll apply what youve learned so far to build small programs. The Book opens with a quick hands-on project to introduce the basics then explores key concepts in depth, such as ownership, the type system, error handling, and fearless concurrency. Next come detailed explanations of Rust-oriented perspectives on topics like pattern matching, iterators, and smart pointers, with concrete examples and exercises--taking you from theory to practice. The Rust Programming Language will also show you how to:- Grasp important concepts unique to Rust, like ownership, borrowing, and lifetimes- Use Cargo, Rusts built-in package manager, to build and maintain your code, including downloading and building dependencies- Effectively use Rusts zero-cost abstractions and employ your own Youll learn to develop reliable code thats speed and memory efficient, while avoiding the infamous and arcane programming pitfalls common at the systems level. When you need to dive down into lower-level control, this guide will show you how without taking on the customary risk of crashes or security holes and without requiring you to learn the fine points of a fickle toolchain. Youll also learn how to create command line programs, build single- and multithreaded web servers, and much more. The Rust Programming Language fully embraces Rusts potential to empower its users. This friendly and approachable guide will help you build not only your knowledge of Rust but also your ability to program with confidence in a wider variety of domains.}
}

@article{emre2023aliasing,
  title={Aliasing limits on translating C to safe Rust},
  author={Emre, Mehmet and Boyland, Peter and Parekh, Aesha and Schroeder, Ryan and Dewey, Kyle and Hardekopf, Ben},
  journal={Proceedings of the ACM on Programming Languages},
  volume={7},
  number={OOPSLA1},
  pages={551--579},
  year={2023},
  publisher={ACM New York, NY, USA}
}

@article{eniser2024towards,
  title={Towards translating real-world code with LLMs: A study of translating to Rust},
  author={Eniser, Hasan Ferit and Zhang, Hanliang and David, Cristina and Wang, Meng and Christakis, Maria and Paulsen, Brandon and Dodds, Joey and Kroening, Daniel},
  journal={arXiv preprint arXiv:2405.11514},
  year={2024}
}

@misc{darpa_c_to_rust,
  author       = {{DARPA}},
  title        = {Translating All C to Rust},
  year         = {2025},
  url          = {https://www.darpa.mil/research/programs/translating-all-c-to-rust},
  note         = {Accessed: 2025-04-30}
}

@misc{rustlang,
  author       = {{Rust Programming Language}},
  title        = {Rust Programming Language},
  year         = {2025},
  url          = {https://www.rust-lang.org},
  note         = {Accessed: 2025-04-30}
}

@article{li2024translating,
  title={Translating c to rust: Lessons from a user study},
  author={Li, Ruishi and Wang, Bo and Li, Tianyu and Saxena, Prateek and Kundu, Ashish},
  journal={arXiv preprint arXiv:2411.14174},
  year={2024}
}

@misc{thakur2025beginners,
  author       = {Gourav Thakur},
  title        = {beginners-C-program-examples},
  year         = {2025},
  howpublished = {\url{https://github.com/gouravthakur39/beginners-C-program-examples}},
  note         = {Accessed: 2025-04-28}
}

